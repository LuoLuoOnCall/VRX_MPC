// Generated by gencpp from file multivessel_msgs/VesselPose.msg
// DO NOT EDIT!


#ifndef MULTIVESSEL_MSGS_MESSAGE_VESSELPOSE_H
#define MULTIVESSEL_MSGS_MESSAGE_VESSELPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <multivessel_msgs/VesselDetails.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace multivessel_msgs
{
template <class ContainerAllocator>
struct VesselPose_
{
  typedef VesselPose_<ContainerAllocator> Type;

  VesselPose_()
    : vessel_id(0)
    , vessel_details()
    , position()
    , orientation()  {
    }
  VesselPose_(const ContainerAllocator& _alloc)
    : vessel_id(0)
    , vessel_details(_alloc)
    , position(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _vessel_id_type;
  _vessel_id_type vessel_id;

   typedef  ::multivessel_msgs::VesselDetails_<ContainerAllocator>  _vessel_details_type;
  _vessel_details_type vessel_details;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::multivessel_msgs::VesselPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multivessel_msgs::VesselPose_<ContainerAllocator> const> ConstPtr;

}; // struct VesselPose_

typedef ::multivessel_msgs::VesselPose_<std::allocator<void> > VesselPose;

typedef boost::shared_ptr< ::multivessel_msgs::VesselPose > VesselPosePtr;
typedef boost::shared_ptr< ::multivessel_msgs::VesselPose const> VesselPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multivessel_msgs::VesselPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multivessel_msgs::VesselPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multivessel_msgs::VesselPose_<ContainerAllocator1> & lhs, const ::multivessel_msgs::VesselPose_<ContainerAllocator2> & rhs)
{
  return lhs.vessel_id == rhs.vessel_id &&
    lhs.vessel_details == rhs.vessel_details &&
    lhs.position == rhs.position &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multivessel_msgs::VesselPose_<ContainerAllocator1> & lhs, const ::multivessel_msgs::VesselPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multivessel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::VesselPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::VesselPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::VesselPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92ab806db689eaace64c0360e37c19a4";
  }

  static const char* value(const ::multivessel_msgs::VesselPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92ab806db689eaacULL;
  static const uint64_t static_value2 = 0xe64c0360e37c19a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multivessel_msgs/VesselPose";
  }

  static const char* value(const ::multivessel_msgs::VesselPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Vessel pose information with vessel detail.\n"
"int64 vessel_id\n"
"multivessel_msgs/VesselDetails vessel_details\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Quaternion orientation\n"
"================================================================================\n"
"MSG: multivessel_msgs/VesselDetails\n"
"# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.\n"
"int64 vessel_id\n"
"std_msgs/String CallSign\n"
"int64 Cargo\n"
"float64 Draft\n"
"std_msgs/String IMO\n"
"float64 Length\n"
"std_msgs/String MMSI\n"
"std_msgs/String TransceiverClass\n"
"std_msgs/String VesselName\n"
"int64 VesselType\n"
"float64 Width\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::multivessel_msgs::VesselPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vessel_id);
      stream.next(m.vessel_details);
      stream.next(m.position);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VesselPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multivessel_msgs::VesselPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multivessel_msgs::VesselPose_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "vessel_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vessel_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vessel_details: ";
    Printer< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >::stream(s, indent + "  ", v.vessel_details);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "position: ";
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "orientation: ";
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIVESSEL_MSGS_MESSAGE_VESSELPOSE_H
