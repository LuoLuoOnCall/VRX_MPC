// Generated by gencpp from file multivessel_msgs/Perception.msg
// DO NOT EDIT!


#ifndef MULTIVESSEL_MSGS_MESSAGE_PERCEPTION_H
#define MULTIVESSEL_MSGS_MESSAGE_PERCEPTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <multivessel_msgs/VesselPose.h>

namespace multivessel_msgs
{
template <class ContainerAllocator>
struct Perception_
{
  typedef Perception_<ContainerAllocator> Type;

  Perception_()
    : header()
    , vessel_poses()  {
    }
  Perception_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vessel_poses(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::multivessel_msgs::VesselPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::multivessel_msgs::VesselPose_<ContainerAllocator> >> _vessel_poses_type;
  _vessel_poses_type vessel_poses;





  typedef boost::shared_ptr< ::multivessel_msgs::Perception_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multivessel_msgs::Perception_<ContainerAllocator> const> ConstPtr;

}; // struct Perception_

typedef ::multivessel_msgs::Perception_<std::allocator<void> > Perception;

typedef boost::shared_ptr< ::multivessel_msgs::Perception > PerceptionPtr;
typedef boost::shared_ptr< ::multivessel_msgs::Perception const> PerceptionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multivessel_msgs::Perception_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multivessel_msgs::Perception_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multivessel_msgs::Perception_<ContainerAllocator1> & lhs, const ::multivessel_msgs::Perception_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vessel_poses == rhs.vessel_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multivessel_msgs::Perception_<ContainerAllocator1> & lhs, const ::multivessel_msgs::Perception_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multivessel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::Perception_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::Perception_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::Perception_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::Perception_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::Perception_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::Perception_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multivessel_msgs::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "695ac89c2af7449068e335be2fb795dc";
  }

  static const char* value(const ::multivessel_msgs::Perception_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x695ac89c2af74490ULL;
  static const uint64_t static_value2 = 0x68e335be2fb795dcULL;
};

template<class ContainerAllocator>
struct DataType< ::multivessel_msgs::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multivessel_msgs/Perception";
  }

  static const char* value(const ::multivessel_msgs::Perception_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multivessel_msgs::Perception_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"multivessel_msgs/VesselPose[] vessel_poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: multivessel_msgs/VesselPose\n"
"# Vessel pose information with vessel detail.\n"
"int64 vessel_id\n"
"multivessel_msgs/VesselDetails vessel_details\n"
"geometry_msgs/Point position\n"
"geometry_msgs/Quaternion orientation\n"
"================================================================================\n"
"MSG: multivessel_msgs/VesselDetails\n"
"# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.\n"
"int64 vessel_id\n"
"std_msgs/String CallSign\n"
"int64 Cargo\n"
"float64 Draft\n"
"std_msgs/String IMO\n"
"float64 Length\n"
"std_msgs/String MMSI\n"
"std_msgs/String TransceiverClass\n"
"std_msgs/String VesselName\n"
"int64 VesselType\n"
"float64 Width\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::multivessel_msgs::Perception_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multivessel_msgs::Perception_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vessel_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Perception_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multivessel_msgs::Perception_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multivessel_msgs::Perception_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vessel_poses: ";
    if (v.vessel_poses.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.vessel_poses.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::multivessel_msgs::VesselPose_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.vessel_poses[i]);
    }
    if (v.vessel_poses.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIVESSEL_MSGS_MESSAGE_PERCEPTION_H
