// Generated by gencpp from file multivessel_msgs/VesselDetails.msg
// DO NOT EDIT!


#ifndef MULTIVESSEL_MSGS_MESSAGE_VESSELDETAILS_H
#define MULTIVESSEL_MSGS_MESSAGE_VESSELDETAILS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace multivessel_msgs
{
template <class ContainerAllocator>
struct VesselDetails_
{
  typedef VesselDetails_<ContainerAllocator> Type;

  VesselDetails_()
    : vessel_id(0)
    , CallSign()
    , Cargo(0)
    , Draft(0.0)
    , IMO()
    , Length(0.0)
    , MMSI()
    , TransceiverClass()
    , VesselName()
    , VesselType(0)
    , Width(0.0)  {
    }
  VesselDetails_(const ContainerAllocator& _alloc)
    : vessel_id(0)
    , CallSign(_alloc)
    , Cargo(0)
    , Draft(0.0)
    , IMO(_alloc)
    , Length(0.0)
    , MMSI(_alloc)
    , TransceiverClass(_alloc)
    , VesselName(_alloc)
    , VesselType(0)
    , Width(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _vessel_id_type;
  _vessel_id_type vessel_id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _CallSign_type;
  _CallSign_type CallSign;

   typedef int64_t _Cargo_type;
  _Cargo_type Cargo;

   typedef double _Draft_type;
  _Draft_type Draft;

   typedef  ::std_msgs::String_<ContainerAllocator>  _IMO_type;
  _IMO_type IMO;

   typedef double _Length_type;
  _Length_type Length;

   typedef  ::std_msgs::String_<ContainerAllocator>  _MMSI_type;
  _MMSI_type MMSI;

   typedef  ::std_msgs::String_<ContainerAllocator>  _TransceiverClass_type;
  _TransceiverClass_type TransceiverClass;

   typedef  ::std_msgs::String_<ContainerAllocator>  _VesselName_type;
  _VesselName_type VesselName;

   typedef int64_t _VesselType_type;
  _VesselType_type VesselType;

   typedef double _Width_type;
  _Width_type Width;





  typedef boost::shared_ptr< ::multivessel_msgs::VesselDetails_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multivessel_msgs::VesselDetails_<ContainerAllocator> const> ConstPtr;

}; // struct VesselDetails_

typedef ::multivessel_msgs::VesselDetails_<std::allocator<void> > VesselDetails;

typedef boost::shared_ptr< ::multivessel_msgs::VesselDetails > VesselDetailsPtr;
typedef boost::shared_ptr< ::multivessel_msgs::VesselDetails const> VesselDetailsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multivessel_msgs::VesselDetails_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multivessel_msgs::VesselDetails_<ContainerAllocator1> & lhs, const ::multivessel_msgs::VesselDetails_<ContainerAllocator2> & rhs)
{
  return lhs.vessel_id == rhs.vessel_id &&
    lhs.CallSign == rhs.CallSign &&
    lhs.Cargo == rhs.Cargo &&
    lhs.Draft == rhs.Draft &&
    lhs.IMO == rhs.IMO &&
    lhs.Length == rhs.Length &&
    lhs.MMSI == rhs.MMSI &&
    lhs.TransceiverClass == rhs.TransceiverClass &&
    lhs.VesselName == rhs.VesselName &&
    lhs.VesselType == rhs.VesselType &&
    lhs.Width == rhs.Width;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multivessel_msgs::VesselDetails_<ContainerAllocator1> & lhs, const ::multivessel_msgs::VesselDetails_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multivessel_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multivessel_msgs::VesselDetails_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multivessel_msgs::VesselDetails_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multivessel_msgs::VesselDetails_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0022f29c59d319c4a2b71911144da0cf";
  }

  static const char* value(const ::multivessel_msgs::VesselDetails_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0022f29c59d319c4ULL;
  static const uint64_t static_value2 = 0xa2b71911144da0cfULL;
};

template<class ContainerAllocator>
struct DataType< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multivessel_msgs/VesselDetails";
  }

  static const char* value(const ::multivessel_msgs::VesselDetails_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.\n"
"int64 vessel_id\n"
"std_msgs/String CallSign\n"
"int64 Cargo\n"
"float64 Draft\n"
"std_msgs/String IMO\n"
"float64 Length\n"
"std_msgs/String MMSI\n"
"std_msgs/String TransceiverClass\n"
"std_msgs/String VesselName\n"
"int64 VesselType\n"
"float64 Width\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::multivessel_msgs::VesselDetails_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vessel_id);
      stream.next(m.CallSign);
      stream.next(m.Cargo);
      stream.next(m.Draft);
      stream.next(m.IMO);
      stream.next(m.Length);
      stream.next(m.MMSI);
      stream.next(m.TransceiverClass);
      stream.next(m.VesselName);
      stream.next(m.VesselType);
      stream.next(m.Width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VesselDetails_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multivessel_msgs::VesselDetails_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multivessel_msgs::VesselDetails_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "vessel_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vessel_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "CallSign: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.CallSign);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Cargo: ";
    Printer<int64_t>::stream(s, indent + "  ", v.Cargo);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Draft: ";
    Printer<double>::stream(s, indent + "  ", v.Draft);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "IMO: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.IMO);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Length: ";
    Printer<double>::stream(s, indent + "  ", v.Length);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "MMSI: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.MMSI);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "TransceiverClass: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.TransceiverClass);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "VesselName: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.VesselName);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "VesselType: ";
    Printer<int64_t>::stream(s, indent + "  ", v.VesselType);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "Width: ";
    Printer<double>::stream(s, indent + "  ", v.Width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTIVESSEL_MSGS_MESSAGE_VESSELDETAILS_H
