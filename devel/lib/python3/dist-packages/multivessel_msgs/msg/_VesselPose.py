# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multivessel_msgs/VesselPose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import multivessel_msgs.msg
import std_msgs.msg

class VesselPose(genpy.Message):
  _md5sum = "92ab806db689eaace64c0360e37c19a4"
  _type = "multivessel_msgs/VesselPose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Vessel pose information with vessel detail.
int64 vessel_id
multivessel_msgs/VesselDetails vessel_details
geometry_msgs/Point position
geometry_msgs/Quaternion orientation
================================================================================
MSG: multivessel_msgs/VesselDetails
# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.
int64 vessel_id
std_msgs/String CallSign
int64 Cargo
float64 Draft
std_msgs/String IMO
float64 Length
std_msgs/String MMSI
std_msgs/String TransceiverClass
std_msgs/String VesselName
int64 VesselType
float64 Width
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['vessel_id','vessel_details','position','orientation']
  _slot_types = ['int64','multivessel_msgs/VesselDetails','geometry_msgs/Point','geometry_msgs/Quaternion']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vessel_id,vessel_details,position,orientation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VesselPose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vessel_id is None:
        self.vessel_id = 0
      if self.vessel_details is None:
        self.vessel_details = multivessel_msgs.msg.VesselDetails()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
    else:
      self.vessel_id = 0
      self.vessel_details = multivessel_msgs.msg.VesselDetails()
      self.position = geometry_msgs.msg.Point()
      self.orientation = geometry_msgs.msg.Quaternion()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.vessel_id, _x.vessel_details.vessel_id))
      _x = self.vessel_details.CallSign.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.vessel_details.Cargo, _x.vessel_details.Draft))
      _x = self.vessel_details.IMO.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.Length
      buff.write(_get_struct_d().pack(_x))
      _x = self.vessel_details.MMSI.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.TransceiverClass.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.VesselName.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q8d().pack(_x.vessel_details.VesselType, _x.vessel_details.Width, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vessel_details is None:
        self.vessel_details = multivessel_msgs.msg.VesselDetails()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.vessel_id, _x.vessel_details.vessel_id,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.CallSign.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.CallSign.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.vessel_details.Cargo, _x.vessel_details.Draft,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.IMO.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.IMO.data = str[start:end]
      start = end
      end += 8
      (self.vessel_details.Length,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.MMSI.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.MMSI.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.TransceiverClass.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.TransceiverClass.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.VesselName.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.VesselName.data = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.vessel_details.VesselType, _x.vessel_details.Width, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_q8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2q().pack(_x.vessel_id, _x.vessel_details.vessel_id))
      _x = self.vessel_details.CallSign.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.vessel_details.Cargo, _x.vessel_details.Draft))
      _x = self.vessel_details.IMO.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.Length
      buff.write(_get_struct_d().pack(_x))
      _x = self.vessel_details.MMSI.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.TransceiverClass.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vessel_details.VesselName.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q8d().pack(_x.vessel_details.VesselType, _x.vessel_details.Width, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.vessel_details is None:
        self.vessel_details = multivessel_msgs.msg.VesselDetails()
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.orientation is None:
        self.orientation = geometry_msgs.msg.Quaternion()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.vessel_id, _x.vessel_details.vessel_id,) = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.CallSign.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.CallSign.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.vessel_details.Cargo, _x.vessel_details.Draft,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.IMO.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.IMO.data = str[start:end]
      start = end
      end += 8
      (self.vessel_details.Length,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.MMSI.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.MMSI.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.TransceiverClass.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.TransceiverClass.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vessel_details.VesselName.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vessel_details.VesselName.data = str[start:end]
      _x = self
      start = end
      end += 72
      (_x.vessel_details.VesselType, _x.vessel_details.Width, _x.position.x, _x.position.y, _x.position.z, _x.orientation.x, _x.orientation.y, _x.orientation.z, _x.orientation.w,) = _get_struct_q8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q8d = None
def _get_struct_q8d():
    global _struct_q8d
    if _struct_q8d is None:
        _struct_q8d = struct.Struct("<q8d")
    return _struct_q8d
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
