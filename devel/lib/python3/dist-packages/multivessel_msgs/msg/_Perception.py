# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multivessel_msgs/Perception.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import multivessel_msgs.msg
import std_msgs.msg

class Perception(genpy.Message):
  _md5sum = "695ac89c2af7449068e335be2fb795dc"
  _type = "multivessel_msgs/Perception"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
multivessel_msgs/VesselPose[] vessel_poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: multivessel_msgs/VesselPose
# Vessel pose information with vessel detail.
int64 vessel_id
multivessel_msgs/VesselDetails vessel_details
geometry_msgs/Point position
geometry_msgs/Quaternion orientation
================================================================================
MSG: multivessel_msgs/VesselDetails
# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.
int64 vessel_id
std_msgs/String CallSign
int64 Cargo
float64 Draft
std_msgs/String IMO
float64 Length
std_msgs/String MMSI
std_msgs/String TransceiverClass
std_msgs/String VesselName
int64 VesselType
float64 Width
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','vessel_poses']
  _slot_types = ['std_msgs/Header','multivessel_msgs/VesselPose[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,vessel_poses

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Perception, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vessel_poses is None:
        self.vessel_poses = []
    else:
      self.header = std_msgs.msg.Header()
      self.vessel_poses = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vessel_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.vessel_poses:
        _x = val1.vessel_id
        buff.write(_get_struct_q().pack(_x))
        _v1 = val1.vessel_details
        _x = _v1.vessel_id
        buff.write(_get_struct_q().pack(_x))
        _v2 = _v1.CallSign
        _x = _v2.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_qd().pack(_x.Cargo, _x.Draft))
        _v3 = _v1.IMO
        _x = _v3.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.Length
        buff.write(_get_struct_d().pack(_x))
        _v4 = _v1.MMSI
        _x = _v4.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = _v1.TransceiverClass
        _x = _v5.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = _v1.VesselName
        _x = _v6.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1
        buff.write(_get_struct_qd().pack(_x.VesselType, _x.Width))
        _v7 = val1.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.orientation
        _x = _v8
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vessel_poses is None:
        self.vessel_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vessel_poses = []
      for i in range(0, length):
        val1 = multivessel_msgs.msg.VesselPose()
        start = end
        end += 8
        (val1.vessel_id,) = _get_struct_q().unpack(str[start:end])
        _v9 = val1.vessel_details
        start = end
        end += 8
        (_v9.vessel_id,) = _get_struct_q().unpack(str[start:end])
        _v10 = _v9.CallSign
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.data = str[start:end]
        _x = _v9
        start = end
        end += 16
        (_x.Cargo, _x.Draft,) = _get_struct_qd().unpack(str[start:end])
        _v11 = _v9.IMO
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v11.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v11.data = str[start:end]
        start = end
        end += 8
        (_v9.Length,) = _get_struct_d().unpack(str[start:end])
        _v12 = _v9.MMSI
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v12.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v12.data = str[start:end]
        _v13 = _v9.TransceiverClass
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v13.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v13.data = str[start:end]
        _v14 = _v9.VesselName
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v14.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v14.data = str[start:end]
        _x = _v9
        start = end
        end += 16
        (_x.VesselType, _x.Width,) = _get_struct_qd().unpack(str[start:end])
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.vessel_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vessel_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.vessel_poses:
        _x = val1.vessel_id
        buff.write(_get_struct_q().pack(_x))
        _v17 = val1.vessel_details
        _x = _v17.vessel_id
        buff.write(_get_struct_q().pack(_x))
        _v18 = _v17.CallSign
        _x = _v18.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v17
        buff.write(_get_struct_qd().pack(_x.Cargo, _x.Draft))
        _v19 = _v17.IMO
        _x = _v19.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v17.Length
        buff.write(_get_struct_d().pack(_x))
        _v20 = _v17.MMSI
        _x = _v20.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v21 = _v17.TransceiverClass
        _x = _v21.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v22 = _v17.VesselName
        _x = _v22.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v17
        buff.write(_get_struct_qd().pack(_x.VesselType, _x.Width))
        _v23 = val1.position
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = val1.orientation
        _x = _v24
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.vessel_poses is None:
        self.vessel_poses = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vessel_poses = []
      for i in range(0, length):
        val1 = multivessel_msgs.msg.VesselPose()
        start = end
        end += 8
        (val1.vessel_id,) = _get_struct_q().unpack(str[start:end])
        _v25 = val1.vessel_details
        start = end
        end += 8
        (_v25.vessel_id,) = _get_struct_q().unpack(str[start:end])
        _v26 = _v25.CallSign
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v26.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v26.data = str[start:end]
        _x = _v25
        start = end
        end += 16
        (_x.Cargo, _x.Draft,) = _get_struct_qd().unpack(str[start:end])
        _v27 = _v25.IMO
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.data = str[start:end]
        start = end
        end += 8
        (_v25.Length,) = _get_struct_d().unpack(str[start:end])
        _v28 = _v25.MMSI
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v28.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v28.data = str[start:end]
        _v29 = _v25.TransceiverClass
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v29.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v29.data = str[start:end]
        _v30 = _v25.VesselName
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.data = str[start:end]
        _x = _v25
        start = end
        end += 16
        (_x.VesselType, _x.Width,) = _get_struct_qd().unpack(str[start:end])
        _v31 = val1.position
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = val1.orientation
        _x = _v32
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.vessel_poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
