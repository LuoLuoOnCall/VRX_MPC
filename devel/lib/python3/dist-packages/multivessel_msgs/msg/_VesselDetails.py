# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from multivessel_msgs/VesselDetails.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class VesselDetails(genpy.Message):
  _md5sum = "0022f29c59d319c4a2b71911144da0cf"
  _type = "multivessel_msgs/VesselDetails"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Details of a vessel such as name, lenght, width etc. which could also be found in AIS data.
int64 vessel_id
std_msgs/String CallSign
int64 Cargo
float64 Draft
std_msgs/String IMO
float64 Length
std_msgs/String MMSI
std_msgs/String TransceiverClass
std_msgs/String VesselName
int64 VesselType
float64 Width
================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['vessel_id','CallSign','Cargo','Draft','IMO','Length','MMSI','TransceiverClass','VesselName','VesselType','Width']
  _slot_types = ['int64','std_msgs/String','int64','float64','std_msgs/String','float64','std_msgs/String','std_msgs/String','std_msgs/String','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vessel_id,CallSign,Cargo,Draft,IMO,Length,MMSI,TransceiverClass,VesselName,VesselType,Width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VesselDetails, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vessel_id is None:
        self.vessel_id = 0
      if self.CallSign is None:
        self.CallSign = std_msgs.msg.String()
      if self.Cargo is None:
        self.Cargo = 0
      if self.Draft is None:
        self.Draft = 0.
      if self.IMO is None:
        self.IMO = std_msgs.msg.String()
      if self.Length is None:
        self.Length = 0.
      if self.MMSI is None:
        self.MMSI = std_msgs.msg.String()
      if self.TransceiverClass is None:
        self.TransceiverClass = std_msgs.msg.String()
      if self.VesselName is None:
        self.VesselName = std_msgs.msg.String()
      if self.VesselType is None:
        self.VesselType = 0
      if self.Width is None:
        self.Width = 0.
    else:
      self.vessel_id = 0
      self.CallSign = std_msgs.msg.String()
      self.Cargo = 0
      self.Draft = 0.
      self.IMO = std_msgs.msg.String()
      self.Length = 0.
      self.MMSI = std_msgs.msg.String()
      self.TransceiverClass = std_msgs.msg.String()
      self.VesselName = std_msgs.msg.String()
      self.VesselType = 0
      self.Width = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.vessel_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.CallSign.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.Cargo, _x.Draft))
      _x = self.IMO.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Length
      buff.write(_get_struct_d().pack(_x))
      _x = self.MMSI.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.TransceiverClass.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.VesselName.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.VesselType, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.CallSign is None:
        self.CallSign = std_msgs.msg.String()
      if self.IMO is None:
        self.IMO = std_msgs.msg.String()
      if self.MMSI is None:
        self.MMSI = std_msgs.msg.String()
      if self.TransceiverClass is None:
        self.TransceiverClass = std_msgs.msg.String()
      if self.VesselName is None:
        self.VesselName = std_msgs.msg.String()
      end = 0
      start = end
      end += 8
      (self.vessel_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.CallSign.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.CallSign.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.Cargo, _x.Draft,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMO.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMO.data = str[start:end]
      start = end
      end += 8
      (self.Length,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.MMSI.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.MMSI.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.TransceiverClass.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.TransceiverClass.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VesselName.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VesselName.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.VesselType, _x.Width,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.vessel_id
      buff.write(_get_struct_q().pack(_x))
      _x = self.CallSign.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.Cargo, _x.Draft))
      _x = self.IMO.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Length
      buff.write(_get_struct_d().pack(_x))
      _x = self.MMSI.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.TransceiverClass.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.VesselName.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qd().pack(_x.VesselType, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.CallSign is None:
        self.CallSign = std_msgs.msg.String()
      if self.IMO is None:
        self.IMO = std_msgs.msg.String()
      if self.MMSI is None:
        self.MMSI = std_msgs.msg.String()
      if self.TransceiverClass is None:
        self.TransceiverClass = std_msgs.msg.String()
      if self.VesselName is None:
        self.VesselName = std_msgs.msg.String()
      end = 0
      start = end
      end += 8
      (self.vessel_id,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.CallSign.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.CallSign.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.Cargo, _x.Draft,) = _get_struct_qd().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IMO.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.IMO.data = str[start:end]
      start = end
      end += 8
      (self.Length,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.MMSI.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.MMSI.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.TransceiverClass.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.TransceiverClass.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.VesselName.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.VesselName.data = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.VesselType, _x.Width,) = _get_struct_qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_qd = None
def _get_struct_qd():
    global _struct_qd
    if _struct_qd is None:
        _struct_qd = struct.Struct("<qd")
    return _struct_qd
